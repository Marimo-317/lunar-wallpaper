name: Claude Flow v3.0 - True AI Hive-Mind Automation
on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, reopened, edited]

permissions:
  issues: write
  contents: read
  pull-requests: write

jobs:
  analyze-issue:
    # Only run on new issues or when @claude-flow-automation is mentioned
    if: >
      (github.event_name == 'issues' && github.event.action == 'opened') ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude-flow-automation'))
    
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Dependencies
      run: |
        npm ci --only=production --no-audit --no-fund
        # Install additional dependencies for automation
        npm install @octokit/rest --no-audit --no-fund

    - name: Setup Environment Variables
      run: |
        echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
        echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
        echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        
        # Handle ISSUE_BODY safely using heredoc
        cat << 'EOF' > issue_body.txt
        ${{ github.event.issue.body }}
        EOF
        
        # Debug information
        echo "üîç Event: ${{ github.event_name }}"
        echo "üîç Action: ${{ github.event.action }}"
        echo "üîç Issue: #${{ github.event.issue.number }}"
        echo "üîç Repository: ${{ github.repository }}"

    - name: Execute Claude Flow v3.0 Hive-Mind System
      run: |
        echo "üêù Starting Claude Flow v3.0 - True AI Hive-Mind Automation..."
        echo "üìã Issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}"
        echo "üéØ Intelligence Level: Advanced Hive-Mind with Neural Networks"
        
        # Execute the true v3.0 Hive-Mind system (NO fallback mode)
        echo "üß† Launching Claude Flow v3.0 Advanced AI..."
        node core/claude-flow-simple.js \
          --issue-number "${{ github.event.issue.number }}" \
          --issue-title "${{ github.event.issue.title }}" \
          --issue-body-file "issue_body.txt" \
          --repository "${{ github.repository }}" \
          2>&1 | tee automation.log
        
        # Verify true AI execution (not fallback)
        if grep -q "Hive-Mind.*completed.*successfully" automation.log; then
          echo "‚úÖ True AI Hive-Mind automation completed successfully"
          echo "üéØ No fallback mode used - genuine AI intelligence deployed"
        else
          echo "‚ùå Hive-Mind execution validation failed"
          echo "üîç Checking for fallback indicators..."
          if grep -q "fallback\|template\|basic" automation.log; then
            echo "‚ö†Ô∏è CRITICAL: System used fallback mode instead of true AI"
            exit 1  # Fail the workflow - fallback is not acceptable
          else
            echo "üîÑ Retrying with enhanced error handling..."
            exit 1
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        REPOSITORY: ${{ github.repository }}

    - name: Upload Automation Logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: automation-logs-${{ github.event.issue.number }}
        path: |
          automation.log
          *.log
        retention-days: 7

    - name: Debug Information
      if: always()
      run: |
        echo "üîç Debug Information:"
        echo "Node Version: $(node --version)"
        echo "NPM Version: $(npm --version)"
        echo "Working Directory: $(pwd)"
        echo "Available Files:"
        ls -la scripts/ || echo "No scripts directory"
        echo "Environment Variables:"
        env | grep -E "(GITHUB_|ISSUE_|REPOSITORY)" | sort
        echo "Process completed with status: $?"